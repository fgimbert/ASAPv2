from pyscript.localfiles import LocalFiles
import json


class RemoteFiles(LocalFiles):
    """
    Set up remote files for a project

    Parameters
    ----------
    - prj_info: dict
        project information (prj name, prefixes, ...)
    - remote: str
        remote host name
    - project: str
        name of the project
    - prefixes: list
        series of a prefix that sepcifies a contents of calculation
    - outdir: str
        temporary output directory for QE
    - destinp: dict{key: str}
        input files for QE on remote host
    - destpp_inp: dict{key: str}
        input files for pp on remote host
    - destpprism_inp: dict{key: str}
        input files for pprism on remote host
    - destout: dict{key: str}
        output files for QE on remote host
    - destpp_out: dict{key: str}
        output files for pp on remote host
    - destpprism_out: dict{key: str}
        output files for pprism on desthost
    - destesm1: dict{key: str}
        ESM output files (chg, pot. profiles) on remote host
    - destrism1: dict{key: str}
        RISM output files (chg, pot. density profiles) on remote host
    - dest1drism: dict{key: str}
        1D-RISM outout files (RDF files for molecules) on remote host
    - destcube: dict{key: str}
        Gaussian cube file generated by pp.x on remote host
    - destpp_tmp: dict{key: str}
        intermediate file for pp.x on remote host
    - destshell: dict{key: str}
        job scripts
    - destsub: str
        job submitting script
    - baseesm: str
        file storage for restart ESM calculations
    - baserism str
        file storage for restart RISM calculations
    - baseesm: str
        file storage for restart 1D-RISM calculations
    ## JSON file format for remote host ##
    {
        "hostname":{            # switch for remote host
            "name": "str"       # Nickname, appears in current & done job files
            "hostabbr": "str"   # Abbreviated host name in .ssh/config
            "host": "str"       # host name used ssh connection
            "user": "str"       # User name
            "port": "int"       # Port number
            "keyfile": "str"    # Path for Identity file
            "workdir": "str"    # Path for working directory
            "pseudo": "str"     # Path for Pseudo Potential directory
            "bindir": "str"     # Path for binary
            "qstat": "str"      # Command for display of batch jobs
            "queue": "str"      # Queue to be submitted
            "jidseq": "str"     # Separator to get Job-ID from qstat
            "jidcol": "str"     # Column # for Job-ID
            "jidchar": "str"    # Job-ID, JOB-ID, etc. Character in qstat
            "jidskip": "str"    # # of skip lines to be read
            "statcol": "str"    # Column # for job status
            "qsub": "str"       # Command for submit a job (e.g. qsub, pjsub)
            "script": ["str"]   # Shell script for job submission. One list element corresponds to a single line
        }
    }
    """
    def __init__(self, prj_info, remote=None):
        super().__init__(prj_info)
        # Common parameters for project
        self.project = prj_info['project']
        self.prefixes = prj_info['prefixes']
        try:
            with open(self.homedir+'/remotehosts.json', mode='r', encoding='utf-8') as fd:
                lines = json.load(fd)
                self.host = lines[remote]['host']
                self.hostabbr = lines[remote]['hostabbr']
                self.name = lines[remote]['name']
                self.user = lines[remote]['user']
                self.port = lines[remote]['port']
                self.keyfile = lines[remote]['keyfile']
                self.workdir = lines[remote]['workdir']+'/'+self.project
                self.pseudo = lines[remote]['pseudo']
                self.bindir = lines[remote]['bindir']
                self.qstat = lines[remote]['qstat']
                self.queue = lines[remote]['queue']
                self.jidsep = lines[remote]['jidsep']
                self.jidcol = lines[remote]['jidcol']
                self.jidchar = lines[remote]['jidchar']
                self.jidskip = lines[remote]['jidskip']
                self.statcol = lines[remote]['statcol']
                self.qsub = lines[remote]['qsub']
                self.script = lines[remote]['script']

        except FileNotFoundError:
            raise Exception("File 'remotehosts.json' does not exist")

        # Common parameters for project
        self.outdir = self.workdir+'/tmp'
        self.base1d = self.workdir+'/tmp/BASE.1d'
        self.baseesm = self.workdir+'/tmp/BASE.ESM'
        self.destsub = self.workdir+'/job_submit'
        self.baserism = self.workdir+'/tmp/BASE.RISM'
        # initialize and set dict parameters
        self.destinp = {}
        self.destout = {}
        self.destesm1 = {}
        self.destcube = {}
        self.destrism1 = {}
        self.destshell = {}
        self.destpp_inp = {}
        self.destpp_out = {}
        self.destpp_tmp = {}
        self.dest1drism = {}
        self.destpprism_inp = {}
        self.destpprism_out = {}
        for prefix in self.prefixes:
            self.destinp[prefix] = self.workdir+'/'+prefix+'.inp'
            self.destout[prefix] = self.workdir+'/'+prefix+'.out'
            self.destesm1[prefix] = self.workdir+'/tmp/'+prefix+'.esm1'
            self.destcube[prefix] = self.workdir+'/'+prefix+'.cube'
            self.destshell[prefix] = self.workdir + '/sub_'+prefix+'.sh'
            self.destrism1[prefix] = self.workdir+'/tmp/'+prefix+'.rism1'
            self.destpp_inp[prefix] = self.workdir+'/'+prefix+'_pp.inp'
            self.destpp_out[prefix] = self.workdir+'/'+prefix+'_pp.out'
            self.destpp_tmp[prefix] = self.workdir+'/'+prefix+'_pp.tmp'
            self.dest1drism[prefix] = self.workdir+'/tmp/'+prefix+'.1drism'
            self.destpprism_inp[prefix] = self.workdir+'/'+prefix+'_pprism.inp'
            self.destpprism_out[prefix] = self.workdir+'/'+prefix+'_pprism.out'
        return
